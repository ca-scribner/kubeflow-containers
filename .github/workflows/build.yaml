# This workflow will build a docker container, publish it to Azure Container Registry, and deploy it to Azure Kubernetes Service using a helm chart.
#
# https://github.com/Azure/actions-workflow-samples/tree/master/Kubernetes
#
# To configure this workflow:
#
# 1. Set up the following secrets in your workspace:
#     a. REGISTRY_USERNAME with ACR username
#     b. REGISTRY_PASSWORD with ACR Password
#     c. AZURE_CREDENTIALS with the output of `az ad sp create-for-rbac --sdk-auth`
#
# 2. Change the values for the REGISTRY_NAME, CLUSTER_NAME, CLUSTER_RESOURCE_GROUP and NAMESPACE environment variables (below).
name: build
on:
  schedule:
    # Execute at 2am EST every day
    - cron:  '0 21 * * *'
  push:
    branches:
      - '*'
      - '!master'

jobs:
  # Any checks that run pre-build
  pre-build-checks:
    # needs: test-free-space
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: Assert committed ./output folder matches `make all` output
      run: |
        sudo apt-get install --yes make
        make clean
        make all
        if ! git diff --quiet output/; then
            echo 'output folder and docker-bits/resources out of sync!'
            exit 1
        fi

  build:
    strategy:
      fail-fast: false
      matrix:
        notebook:
          # TODO: Pull this from a settings file or Makefile, that way Make can have the same list 
          - docker-stacks-datascience-notebook # Debugging
          - rstudio
          - jupyterlab-cpu
          - jupyterlab-pytorch
          - jupyterlab-tensorflow
          - jupyterlab-cpu-ol-compliant
          - jupyterlab-pytorch-ol-compliant
          - jupyterlab-tensorflow-ol-compliant
          - remote-desktop
    needs: pre-build-checks
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
    # - name: Echo free space before enabling additional space
    #   run: |
    #     echo "Free space:"
    #     df -h

    # - name: Maximize build space
    #   uses: easimon/maximize-build-space@master
    #   with:
    #     root-reserve-mb: 512
    #     swap-size-mb: 1024
    #     remove-dotnet: 'true'

    - uses: actions/checkout@master

    - run: |
        echo "df -h"
        df -h
        docker images

    - run: |
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt clean
        docker rmi -f $(docker image ls -aq) || true

    - run: |
        echo "df -h"
        df -h
        docker images

    - name: Make all Dockerfiles
      run: make all

    - run: |
        echo "df -h"
        df -h
        docker images

    - name: Add SHORT_SHA env property with commit short sha
      run:  echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

    - run: |
        echo "df -h"
        df -h
        docker images

    - name: Set Up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - run: |
        echo "df -h"
        df -h
        docker images

    - name: Set up image testing venv
      run: |
        python -m pip install --upgrade pip
        make install-python-dev-venv

    - run: |
        echo "df -h"
        df -h
        docker images

    # Container build and push to a Azure Container registry (ACR)
    - name: Build image
      run: |
        COMMIT=$(make get-docker-stacks-upstream-tag)
        echo
        cd output/${{ matrix.notebook }}
        docker build . --build-arg BASE_VERSION=$COMMIT -t localhost:5000/${{ matrix.notebook }}:$SHORT_SHA
        docker push localhost:5000/${{ matrix.notebook }}:$SHORT_SHA
        cd -

    - run: |
        echo "df -h"
        df -h
        docker images

    - name: Clean up build environment
      run: |
        docker rmi -f localhost:5000/${{ matrix.notebook }}:$SHORT_SHA
        docker image prune  # Removes dangling images, NOT all unused images.  So this will not remove any prereqs we downloaded

    - run: |
        echo "df -h"
        df -h
        docker images

    - name: Clean up build environment more
      run: |
        docker rmi -f $(docker image ls -aq) || true

    - run: |
        echo "df -h"
        df -h
        docker images

    # TODO: In refactor of makefile, you can stick with just using latest (branch_name?) tag
    # during build then at the end push with `docker push --all-tags`, rather than pass
    # SHORT_SHA, etc, around like now.  Or, at least use branch_name
    - name: Test image
      run: |
        make test/${{ matrix.notebook }}:$SHORT_SHA REPO=localhost:5000

    - run: |
        echo "df -h"
        df -h
        docker images

    # Scan image for vulnerabilities
    - uses: Azure/container-scan@v0
      env:
        TRIVY_TIMEOUT: 10m0s  # Trivy default is 2min.  Some images take a bit longer
      with:
        image-name: localhost:5000/${{ matrix.notebook }}:${{ env.SHORT_SHA }}
        severity-threshold: CRITICAL
        run-quality-checks: false

    - run: |
        echo "df -h"
        df -h
        docker images

